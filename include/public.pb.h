// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_public_2eproto;
namespace fixbuf {
class AddGroup;
class AddGroupDefaultTypeInternal;
extern AddGroupDefaultTypeInternal _AddGroup_default_instance_;
class CreateGroup;
class CreateGroupDefaultTypeInternal;
extern CreateGroupDefaultTypeInternal _CreateGroup_default_instance_;
class ErrorMsg;
class ErrorMsgDefaultTypeInternal;
extern ErrorMsgDefaultTypeInternal _ErrorMsg_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class FileTrans;
class FileTransDefaultTypeInternal;
extern FileTransDefaultTypeInternal _FileTrans_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class FromMsg;
class FromMsgDefaultTypeInternal;
extern FromMsgDefaultTypeInternal _FromMsg_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupMsg;
class GroupMsgDefaultTypeInternal;
extern GroupMsgDefaultTypeInternal _GroupMsg_default_instance_;
class GroupUser;
class GroupUserDefaultTypeInternal;
extern GroupUserDefaultTypeInternal _GroupUser_default_instance_;
class Info;
class InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class LoginMsg;
class LoginMsgDefaultTypeInternal;
extern LoginMsgDefaultTypeInternal _LoginMsg_default_instance_;
class ToUserMsg;
class ToUserMsgDefaultTypeInternal;
extern ToUserMsgDefaultTypeInternal _ToUserMsg_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace fixbuf
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbuf::AddGroup* Arena::CreateMaybeMessage<::fixbuf::AddGroup>(Arena*);
template<> ::fixbuf::CreateGroup* Arena::CreateMaybeMessage<::fixbuf::CreateGroup>(Arena*);
template<> ::fixbuf::ErrorMsg* Arena::CreateMaybeMessage<::fixbuf::ErrorMsg>(Arena*);
template<> ::fixbuf::FileList* Arena::CreateMaybeMessage<::fixbuf::FileList>(Arena*);
template<> ::fixbuf::FileTrans* Arena::CreateMaybeMessage<::fixbuf::FileTrans>(Arena*);
template<> ::fixbuf::Friend* Arena::CreateMaybeMessage<::fixbuf::Friend>(Arena*);
template<> ::fixbuf::FromMsg* Arena::CreateMaybeMessage<::fixbuf::FromMsg>(Arena*);
template<> ::fixbuf::Group* Arena::CreateMaybeMessage<::fixbuf::Group>(Arena*);
template<> ::fixbuf::GroupMsg* Arena::CreateMaybeMessage<::fixbuf::GroupMsg>(Arena*);
template<> ::fixbuf::GroupUser* Arena::CreateMaybeMessage<::fixbuf::GroupUser>(Arena*);
template<> ::fixbuf::Info* Arena::CreateMaybeMessage<::fixbuf::Info>(Arena*);
template<> ::fixbuf::LoginMsg* Arena::CreateMaybeMessage<::fixbuf::LoginMsg>(Arena*);
template<> ::fixbuf::ToUserMsg* Arena::CreateMaybeMessage<::fixbuf::ToUserMsg>(Arena*);
template<> ::fixbuf::User* Arena::CreateMaybeMessage<::fixbuf::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbuf {

enum MsgType : int {
  LOGIN_MSG = 0,
  LOGIN_MSG_ACK = 1,
  REGISTER_MSG = 2,
  REGISTER_MSG_ACK = 3,
  ADD_FRIEND_MSG = 4,
  ADD_FRIEND_MSG_ACK = 5,
  CREATE_GROUP_MSG = 6,
  CREATE_GROUP_MSG_ACK = 7,
  ADD_GROUP_MSG = 8,
  ADD_GROUP_MSG_ACK = 9,
  ONE_CHAT = 10,
  GROUP_CHAT = 11,
  LOGOUT_MSG = 12,
  LIST_MSG = 13,
  LIST_MSG_ACK = 14,
  DELETEFILE_MSG = 15,
  DELETEFILE_MSG_ACK = 16,
  DOWNLOAD_MSG = 17,
  DOWNLOAD_MSG_ACK = 18,
  UPLOAD_MSG = 19,
  UPLOAD_MSG_ACK = 20,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = LOGIN_MSG;
constexpr MsgType MsgType_MAX = UPLOAD_MSG_ACK;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class ErrorMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.ErrorMsg) */ {
 public:
  inline ErrorMsg() : ErrorMsg(nullptr) {};
  virtual ~ErrorMsg();

  ErrorMsg(const ErrorMsg& from);
  ErrorMsg(ErrorMsg&& from) noexcept
    : ErrorMsg() {
    *this = ::std::move(from);
  }

  inline ErrorMsg& operator=(const ErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorMsg& operator=(ErrorMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorMsg* internal_default_instance() {
    return reinterpret_cast<const ErrorMsg*>(
               &_ErrorMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorMsg& a, ErrorMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorMsg* New() const final {
    return CreateMaybeMessage<ErrorMsg>(nullptr);
  }

  ErrorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorMsg& from);
  void MergeFrom(const ErrorMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.ErrorMsg";
  }
  protected:
  explicit ErrorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.ErrorMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class Info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.Info) */ {
 public:
  inline Info() : Info(nullptr) {};
  virtual ~Info();

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const final {
    return CreateMaybeMessage<Info>(nullptr);
  }

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.Info";
  }
  protected:
  explicit Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_info(
      std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .fixbuf.MsgType type = 1;
  void clear_type();
  ::fixbuf::MsgType type() const;
  void set_type(::fixbuf::MsgType value);
  private:
  ::fixbuf::MsgType _internal_type() const;
  void _internal_set_type(::fixbuf::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.User) */ {
 public:
  inline User() : User(nullptr) {};
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool state = 4;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class Friend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.Friend) */ {
 public:
  inline Friend() : Friend(nullptr) {};
  virtual ~Friend();

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(nullptr);
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.Friend";
  }
  protected:
  explicit Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kFriendidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friendid = 2;
  void clear_friendid();
  ::PROTOBUF_NAMESPACE_ID::int32 friendid() const;
  void set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friendid() const;
  void _internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 friendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class GroupUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.GroupUser) */ {
 public:
  inline GroupUser() : GroupUser(nullptr) {};
  virtual ~GroupUser();

  GroupUser(const GroupUser& from);
  GroupUser(GroupUser&& from) noexcept
    : GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUser& operator=(GroupUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUser*>(
               &_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupUser& a, GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUser* New() const final {
    return CreateMaybeMessage<GroupUser>(nullptr);
  }

  GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUser& from);
  void MergeFrom(const GroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.GroupUser";
  }
  protected:
  explicit GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // bytes role = 2;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const void* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_role();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role(
      std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .fixbuf.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::fixbuf::User& user() const;
  ::fixbuf::User* release_user();
  ::fixbuf::User* mutable_user();
  void set_allocated_user(::fixbuf::User* user);
  private:
  const ::fixbuf::User& _internal_user() const;
  ::fixbuf::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::fixbuf::User* user);
  ::fixbuf::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:fixbuf.GroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::fixbuf::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class Group PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.Group) */ {
 public:
  inline Group() : Group(nullptr) {};
  virtual ~Group();

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(nullptr);
  }

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupusersFieldNumber = 4,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .fixbuf.GroupUser groupusers = 4;
  int groupusers_size() const;
  private:
  int _internal_groupusers_size() const;
  public:
  void clear_groupusers();
  ::fixbuf::GroupUser* mutable_groupusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::GroupUser >*
      mutable_groupusers();
  private:
  const ::fixbuf::GroupUser& _internal_groupusers(int index) const;
  ::fixbuf::GroupUser* _internal_add_groupusers();
  public:
  const ::fixbuf::GroupUser& groupusers(int index) const;
  ::fixbuf::GroupUser* add_groupusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::GroupUser >&
      groupusers() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::GroupUser > groupusers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class CreateGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.CreateGroup) */ {
 public:
  inline CreateGroup() : CreateGroup(nullptr) {};
  virtual ~CreateGroup();

  CreateGroup(const CreateGroup& from);
  CreateGroup(CreateGroup&& from) noexcept
    : CreateGroup() {
    *this = ::std::move(from);
  }

  inline CreateGroup& operator=(const CreateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroup& operator=(CreateGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroup* internal_default_instance() {
    return reinterpret_cast<const CreateGroup*>(
               &_CreateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateGroup& a, CreateGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroup* New() const final {
    return CreateMaybeMessage<CreateGroup>(nullptr);
  }

  CreateGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroup& from);
  void MergeFrom(const CreateGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.CreateGroup";
  }
  protected:
  explicit CreateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // .fixbuf.Group group = 2;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::fixbuf::Group& group() const;
  ::fixbuf::Group* release_group();
  ::fixbuf::Group* mutable_group();
  void set_allocated_group(::fixbuf::Group* group);
  private:
  const ::fixbuf::Group& _internal_group() const;
  ::fixbuf::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::fixbuf::Group* group);
  ::fixbuf::Group* unsafe_arena_release_group();

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.CreateGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbuf::Group* group_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class AddGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.AddGroup) */ {
 public:
  inline AddGroup() : AddGroup(nullptr) {};
  virtual ~AddGroup();

  AddGroup(const AddGroup& from);
  AddGroup(AddGroup&& from) noexcept
    : AddGroup() {
    *this = ::std::move(from);
  }

  inline AddGroup& operator=(const AddGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroup& operator=(AddGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroup* internal_default_instance() {
    return reinterpret_cast<const AddGroup*>(
               &_AddGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddGroup& a, AddGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroup* New() const final {
    return CreateMaybeMessage<AddGroup>(nullptr);
  }

  AddGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroup& from);
  void MergeFrom(const AddGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.AddGroup";
  }
  protected:
  explicit AddGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.AddGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class ToUserMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.ToUserMsg) */ {
 public:
  inline ToUserMsg() : ToUserMsg(nullptr) {};
  virtual ~ToUserMsg();

  ToUserMsg(const ToUserMsg& from);
  ToUserMsg(ToUserMsg&& from) noexcept
    : ToUserMsg() {
    *this = ::std::move(from);
  }

  inline ToUserMsg& operator=(const ToUserMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToUserMsg& operator=(ToUserMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToUserMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToUserMsg* internal_default_instance() {
    return reinterpret_cast<const ToUserMsg*>(
               &_ToUserMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ToUserMsg& a, ToUserMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ToUserMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToUserMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToUserMsg* New() const final {
    return CreateMaybeMessage<ToUserMsg>(nullptr);
  }

  ToUserMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToUserMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToUserMsg& from);
  void MergeFrom(const ToUserMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToUserMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.ToUserMsg";
  }
  protected:
  explicit ToUserMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kSendtimeFieldNumber = 4,
    kMsgFieldNumber = 5,
    kUseridFieldNumber = 1,
    kTouseridFieldNumber = 3,
  };
  // bytes username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes sendtime = 4;
  void clear_sendtime();
  const std::string& sendtime() const;
  void set_sendtime(const std::string& value);
  void set_sendtime(std::string&& value);
  void set_sendtime(const char* value);
  void set_sendtime(const void* value, size_t size);
  std::string* mutable_sendtime();
  std::string* release_sendtime();
  void set_allocated_sendtime(std::string* sendtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sendtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sendtime(
      std::string* sendtime);
  private:
  const std::string& _internal_sendtime() const;
  void _internal_set_sendtime(const std::string& value);
  std::string* _internal_mutable_sendtime();
  public:

  // bytes msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touserid = 3;
  void clear_touserid();
  ::PROTOBUF_NAMESPACE_ID::int32 touserid() const;
  void set_touserid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touserid() const;
  void _internal_set_touserid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.ToUserMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class FromMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.FromMsg) */ {
 public:
  inline FromMsg() : FromMsg(nullptr) {};
  virtual ~FromMsg();

  FromMsg(const FromMsg& from);
  FromMsg(FromMsg&& from) noexcept
    : FromMsg() {
    *this = ::std::move(from);
  }

  inline FromMsg& operator=(const FromMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromMsg& operator=(FromMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromMsg* internal_default_instance() {
    return reinterpret_cast<const FromMsg*>(
               &_FromMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FromMsg& a, FromMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FromMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromMsg* New() const final {
    return CreateMaybeMessage<FromMsg>(nullptr);
  }

  FromMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromMsg& from);
  void MergeFrom(const FromMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.FromMsg";
  }
  protected:
  explicit FromMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromnameFieldNumber = 2,
    kSendtimeFieldNumber = 3,
    kMsgFieldNumber = 4,
    kFromidFieldNumber = 1,
  };
  // bytes fromname = 2;
  void clear_fromname();
  const std::string& fromname() const;
  void set_fromname(const std::string& value);
  void set_fromname(std::string&& value);
  void set_fromname(const char* value);
  void set_fromname(const void* value, size_t size);
  std::string* mutable_fromname();
  std::string* release_fromname();
  void set_allocated_fromname(std::string* fromname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fromname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fromname(
      std::string* fromname);
  private:
  const std::string& _internal_fromname() const;
  void _internal_set_fromname(const std::string& value);
  std::string* _internal_mutable_fromname();
  public:

  // bytes sendtime = 3;
  void clear_sendtime();
  const std::string& sendtime() const;
  void set_sendtime(const std::string& value);
  void set_sendtime(std::string&& value);
  void set_sendtime(const char* value);
  void set_sendtime(const void* value, size_t size);
  std::string* mutable_sendtime();
  std::string* release_sendtime();
  void set_allocated_sendtime(std::string* sendtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sendtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sendtime(
      std::string* sendtime);
  private:
  const std::string& _internal_sendtime() const;
  void _internal_set_sendtime(const std::string& value);
  std::string* _internal_mutable_sendtime();
  public:

  // bytes msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 fromid = 1;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.FromMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class GroupMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.GroupMsg) */ {
 public:
  inline GroupMsg() : GroupMsg(nullptr) {};
  virtual ~GroupMsg();

  GroupMsg(const GroupMsg& from);
  GroupMsg(GroupMsg&& from) noexcept
    : GroupMsg() {
    *this = ::std::move(from);
  }

  inline GroupMsg& operator=(const GroupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMsg& operator=(GroupMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMsg* internal_default_instance() {
    return reinterpret_cast<const GroupMsg*>(
               &_GroupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupMsg& a, GroupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMsg* New() const final {
    return CreateMaybeMessage<GroupMsg>(nullptr);
  }

  GroupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMsg& from);
  void MergeFrom(const GroupMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.GroupMsg";
  }
  protected:
  explicit GroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kSendtimeFieldNumber = 4,
    kMsgFieldNumber = 5,
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 3,
  };
  // bytes username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes sendtime = 4;
  void clear_sendtime();
  const std::string& sendtime() const;
  void set_sendtime(const std::string& value);
  void set_sendtime(std::string&& value);
  void set_sendtime(const char* value);
  void set_sendtime(const void* value, size_t size);
  std::string* mutable_sendtime();
  std::string* release_sendtime();
  void set_allocated_sendtime(std::string* sendtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sendtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sendtime(
      std::string* sendtime);
  private:
  const std::string& _internal_sendtime() const;
  void _internal_set_sendtime(const std::string& value);
  std::string* _internal_mutable_sendtime();
  public:

  // bytes msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groupid = 3;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.GroupMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class LoginMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.LoginMsg) */ {
 public:
  inline LoginMsg() : LoginMsg(nullptr) {};
  virtual ~LoginMsg();

  LoginMsg(const LoginMsg& from);
  LoginMsg(LoginMsg&& from) noexcept
    : LoginMsg() {
    *this = ::std::move(from);
  }

  inline LoginMsg& operator=(const LoginMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginMsg& operator=(LoginMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginMsg* internal_default_instance() {
    return reinterpret_cast<const LoginMsg*>(
               &_LoginMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoginMsg& a, LoginMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginMsg* New() const final {
    return CreateMaybeMessage<LoginMsg>(nullptr);
  }

  LoginMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginMsg& from);
  void MergeFrom(const LoginMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.LoginMsg";
  }
  protected:
  explicit LoginMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvmsgFieldNumber = 2,
    kFriendlistFieldNumber = 3,
    kGrouplistFieldNumber = 4,
    kUserFieldNumber = 1,
  };
  // repeated bytes recvmsg = 2;
  int recvmsg_size() const;
  private:
  int _internal_recvmsg_size() const;
  public:
  void clear_recvmsg();
  const std::string& recvmsg(int index) const;
  std::string* mutable_recvmsg(int index);
  void set_recvmsg(int index, const std::string& value);
  void set_recvmsg(int index, std::string&& value);
  void set_recvmsg(int index, const char* value);
  void set_recvmsg(int index, const void* value, size_t size);
  std::string* add_recvmsg();
  void add_recvmsg(const std::string& value);
  void add_recvmsg(std::string&& value);
  void add_recvmsg(const char* value);
  void add_recvmsg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recvmsg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recvmsg();
  private:
  const std::string& _internal_recvmsg(int index) const;
  std::string* _internal_add_recvmsg();
  public:

  // repeated .fixbuf.User friendlist = 3;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::fixbuf::User* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::User >*
      mutable_friendlist();
  private:
  const ::fixbuf::User& _internal_friendlist(int index) const;
  ::fixbuf::User* _internal_add_friendlist();
  public:
  const ::fixbuf::User& friendlist(int index) const;
  ::fixbuf::User* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::User >&
      friendlist() const;

  // repeated .fixbuf.Group grouplist = 4;
  int grouplist_size() const;
  private:
  int _internal_grouplist_size() const;
  public:
  void clear_grouplist();
  ::fixbuf::Group* mutable_grouplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::Group >*
      mutable_grouplist();
  private:
  const ::fixbuf::Group& _internal_grouplist(int index) const;
  ::fixbuf::Group* _internal_add_grouplist();
  public:
  const ::fixbuf::Group& grouplist(int index) const;
  ::fixbuf::Group* add_grouplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::Group >&
      grouplist() const;

  // .fixbuf.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::fixbuf::User& user() const;
  ::fixbuf::User* release_user();
  ::fixbuf::User* mutable_user();
  void set_allocated_user(::fixbuf::User* user);
  private:
  const ::fixbuf::User& _internal_user() const;
  ::fixbuf::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::fixbuf::User* user);
  ::fixbuf::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:fixbuf.LoginMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recvmsg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::User > friendlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::Group > grouplist_;
  ::fixbuf::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class FileList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.FileList) */ {
 public:
  inline FileList() : FileList(nullptr) {};
  virtual ~FileList();

  FileList(const FileList& from);
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.FileList";
  }
  protected:
  explicit FileList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilelistFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // repeated bytes filelist = 2;
  int filelist_size() const;
  private:
  int _internal_filelist_size() const;
  public:
  void clear_filelist();
  const std::string& filelist(int index) const;
  std::string* mutable_filelist(int index);
  void set_filelist(int index, const std::string& value);
  void set_filelist(int index, std::string&& value);
  void set_filelist(int index, const char* value);
  void set_filelist(int index, const void* value, size_t size);
  std::string* add_filelist();
  void add_filelist(const std::string& value);
  void add_filelist(std::string&& value);
  void add_filelist(const char* value);
  void add_filelist(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filelist();
  private:
  const std::string& _internal_filelist(int index) const;
  std::string* _internal_add_filelist();
  public:

  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.FileList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filelist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class FileTrans PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbuf.FileTrans) */ {
 public:
  inline FileTrans() : FileTrans(nullptr) {};
  virtual ~FileTrans();

  FileTrans(const FileTrans& from);
  FileTrans(FileTrans&& from) noexcept
    : FileTrans() {
    *this = ::std::move(from);
  }

  inline FileTrans& operator=(const FileTrans& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTrans& operator=(FileTrans&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileTrans* internal_default_instance() {
    return reinterpret_cast<const FileTrans*>(
               &_FileTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FileTrans& a, FileTrans& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTrans* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTrans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTrans* New() const final {
    return CreateMaybeMessage<FileTrans>(nullptr);
  }

  FileTrans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTrans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileTrans& from);
  void MergeFrom(const FileTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTrans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbuf.FileTrans";
  }
  protected:
  explicit FileTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_2eproto);
    return ::descriptor_table_public_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kFilenameFieldNumber = 3,
    kNewfilenameFieldNumber = 4,
    kPortFieldNumber = 2,
  };
  // bytes ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes filename = 3;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes newfilename = 4;
  void clear_newfilename();
  const std::string& newfilename() const;
  void set_newfilename(const std::string& value);
  void set_newfilename(std::string&& value);
  void set_newfilename(const char* value);
  void set_newfilename(const void* value, size_t size);
  std::string* mutable_newfilename();
  std::string* release_newfilename();
  void set_allocated_newfilename(std::string* newfilename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newfilename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newfilename(
      std::string* newfilename);
  private:
  const std::string& _internal_newfilename() const;
  void _internal_set_newfilename(const std::string& value);
  std::string* _internal_mutable_newfilename();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbuf.FileTrans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newfilename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorMsg

// int32 errcode = 1;
inline void ErrorMsg::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorMsg::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorMsg::errcode() const {
  // @@protoc_insertion_point(field_get:fixbuf.ErrorMsg.errcode)
  return _internal_errcode();
}
inline void ErrorMsg::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ErrorMsg::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:fixbuf.ErrorMsg.errcode)
}

// bytes errmsg = 2;
inline void ErrorMsg::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorMsg::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbuf.ErrorMsg.errmsg)
  return _internal_errmsg();
}
inline void ErrorMsg::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:fixbuf.ErrorMsg.errmsg)
}
inline std::string* ErrorMsg::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:fixbuf.ErrorMsg.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ErrorMsg::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ErrorMsg::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorMsg::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.ErrorMsg.errmsg)
}
inline void ErrorMsg::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.ErrorMsg.errmsg)
}
inline void ErrorMsg::set_errmsg(const void* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.ErrorMsg.errmsg)
}
inline std::string* ErrorMsg::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorMsg::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbuf.ErrorMsg.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorMsg::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.ErrorMsg.errmsg)
}
inline std::string* ErrorMsg::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.ErrorMsg.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorMsg::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.ErrorMsg.errmsg)
}

// -------------------------------------------------------------------

// Info

// .fixbuf.MsgType type = 1;
inline void Info::clear_type() {
  type_ = 0;
}
inline ::fixbuf::MsgType Info::_internal_type() const {
  return static_cast< ::fixbuf::MsgType >(type_);
}
inline ::fixbuf::MsgType Info::type() const {
  // @@protoc_insertion_point(field_get:fixbuf.Info.type)
  return _internal_type();
}
inline void Info::_internal_set_type(::fixbuf::MsgType value) {
  
  type_ = value;
}
inline void Info::set_type(::fixbuf::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fixbuf.Info.type)
}

// bytes info = 2;
inline void Info::clear_info() {
  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Info::info() const {
  // @@protoc_insertion_point(field_get:fixbuf.Info.info)
  return _internal_info();
}
inline void Info::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:fixbuf.Info.info)
}
inline std::string* Info::mutable_info() {
  // @@protoc_insertion_point(field_mutable:fixbuf.Info.info)
  return _internal_mutable_info();
}
inline const std::string& Info::_internal_info() const {
  return info_.Get();
}
inline void Info::_internal_set_info(const std::string& value) {
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Info::set_info(std::string&& value) {
  
  info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.Info.info)
}
inline void Info::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.Info.info)
}
inline void Info::set_info(const void* value,
    size_t size) {
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.Info.info)
}
inline std::string* Info::_internal_mutable_info() {
  
  return info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Info::release_info() {
  // @@protoc_insertion_point(field_release:fixbuf.Info.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Info::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.Info.info)
}
inline std::string* Info::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.Info.info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Info::unsafe_arena_set_allocated_info(
    std::string* info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (info != nullptr) {
    
  } else {
    
  }
  info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.Info.info)
}

// -------------------------------------------------------------------

// User

// int32 id = 1;
inline void User::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:fixbuf.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fixbuf.User.id)
}

// bytes name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:fixbuf.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fixbuf.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fixbuf.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.User.name)
}
inline void User::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:fixbuf.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.User.name)
}
inline std::string* User::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.User.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.User.name)
}

// bytes password = 3;
inline void User::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:fixbuf.User.password)
  return _internal_password();
}
inline void User::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:fixbuf.User.password)
}
inline std::string* User::mutable_password() {
  // @@protoc_insertion_point(field_mutable:fixbuf.User.password)
  return _internal_mutable_password();
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.User.password)
}
inline void User::set_password(const void* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.User.password)
}
inline std::string* User::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:fixbuf.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.User.password)
}
inline std::string* User::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.User.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.User.password)
}

// bool state = 4;
inline void User::clear_state() {
  state_ = false;
}
inline bool User::_internal_state() const {
  return state_;
}
inline bool User::state() const {
  // @@protoc_insertion_point(field_get:fixbuf.User.state)
  return _internal_state();
}
inline void User::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void User::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:fixbuf.User.state)
}

// -------------------------------------------------------------------

// Friend

// int32 userid = 1;
inline void Friend::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.Friend.userid)
  return _internal_userid();
}
inline void Friend::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void Friend::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.Friend.userid)
}

// int32 friendid = 2;
inline void Friend::clear_friendid() {
  friendid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::_internal_friendid() const {
  return friendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::friendid() const {
  // @@protoc_insertion_point(field_get:fixbuf.Friend.friendid)
  return _internal_friendid();
}
inline void Friend::_internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friendid_ = value;
}
inline void Friend::set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:fixbuf.Friend.friendid)
}

// -------------------------------------------------------------------

// GroupUser

// .fixbuf.User user = 1;
inline bool GroupUser::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GroupUser::has_user() const {
  return _internal_has_user();
}
inline void GroupUser::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::fixbuf::User& GroupUser::_internal_user() const {
  const ::fixbuf::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbuf::User*>(
      &::fixbuf::_User_default_instance_);
}
inline const ::fixbuf::User& GroupUser::user() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupUser.user)
  return _internal_user();
}
inline void GroupUser::unsafe_arena_set_allocated_user(
    ::fixbuf::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.GroupUser.user)
}
inline ::fixbuf::User* GroupUser::release_user() {
  auto temp = unsafe_arena_release_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbuf::User* GroupUser::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:fixbuf.GroupUser.user)
  
  ::fixbuf::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::fixbuf::User* GroupUser::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbuf::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::fixbuf::User* GroupUser::mutable_user() {
  // @@protoc_insertion_point(field_mutable:fixbuf.GroupUser.user)
  return _internal_mutable_user();
}
inline void GroupUser::set_allocated_user(::fixbuf::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:fixbuf.GroupUser.user)
}

// bytes role = 2;
inline void GroupUser::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupUser::role() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupUser.role)
  return _internal_role();
}
inline void GroupUser::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupUser.role)
}
inline std::string* GroupUser::mutable_role() {
  // @@protoc_insertion_point(field_mutable:fixbuf.GroupUser.role)
  return _internal_mutable_role();
}
inline const std::string& GroupUser::_internal_role() const {
  return role_.Get();
}
inline void GroupUser::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupUser::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.GroupUser.role)
}
inline void GroupUser::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.GroupUser.role)
}
inline void GroupUser::set_role(const void* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.GroupUser.role)
}
inline std::string* GroupUser::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupUser::release_role() {
  // @@protoc_insertion_point(field_release:fixbuf.GroupUser.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUser::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.GroupUser.role)
}
inline std::string* GroupUser::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.GroupUser.role)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return role_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupUser::unsafe_arena_set_allocated_role(
    std::string* role) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (role != nullptr) {
    
  } else {
    
  }
  role_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      role, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.GroupUser.role)
}

// -------------------------------------------------------------------

// Group

// int32 id = 1;
inline void Group::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::id() const {
  // @@protoc_insertion_point(field_get:fixbuf.Group.id)
  return _internal_id();
}
inline void Group::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Group::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fixbuf.Group.id)
}

// bytes name = 2;
inline void Group::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:fixbuf.Group.name)
  return _internal_name();
}
inline void Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fixbuf.Group.name)
}
inline std::string* Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fixbuf.Group.name)
  return _internal_mutable_name();
}
inline const std::string& Group::_internal_name() const {
  return name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.Group.name)
}
inline void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.Group.name)
}
inline void Group::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.Group.name)
}
inline std::string* Group::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:fixbuf.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.Group.name)
}
inline std::string* Group::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.Group.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Group::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.Group.name)
}

// bytes desc = 3;
inline void Group::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::desc() const {
  // @@protoc_insertion_point(field_get:fixbuf.Group.desc)
  return _internal_desc();
}
inline void Group::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:fixbuf.Group.desc)
}
inline std::string* Group::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:fixbuf.Group.desc)
  return _internal_mutable_desc();
}
inline const std::string& Group::_internal_desc() const {
  return desc_.Get();
}
inline void Group::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.Group.desc)
}
inline void Group::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.Group.desc)
}
inline void Group::set_desc(const void* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.Group.desc)
}
inline std::string* Group::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_desc() {
  // @@protoc_insertion_point(field_release:fixbuf.Group.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.Group.desc)
}
inline std::string* Group::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.Group.desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Group::unsafe_arena_set_allocated_desc(
    std::string* desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.Group.desc)
}

// repeated .fixbuf.GroupUser groupusers = 4;
inline int Group::_internal_groupusers_size() const {
  return groupusers_.size();
}
inline int Group::groupusers_size() const {
  return _internal_groupusers_size();
}
inline void Group::clear_groupusers() {
  groupusers_.Clear();
}
inline ::fixbuf::GroupUser* Group::mutable_groupusers(int index) {
  // @@protoc_insertion_point(field_mutable:fixbuf.Group.groupusers)
  return groupusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::GroupUser >*
Group::mutable_groupusers() {
  // @@protoc_insertion_point(field_mutable_list:fixbuf.Group.groupusers)
  return &groupusers_;
}
inline const ::fixbuf::GroupUser& Group::_internal_groupusers(int index) const {
  return groupusers_.Get(index);
}
inline const ::fixbuf::GroupUser& Group::groupusers(int index) const {
  // @@protoc_insertion_point(field_get:fixbuf.Group.groupusers)
  return _internal_groupusers(index);
}
inline ::fixbuf::GroupUser* Group::_internal_add_groupusers() {
  return groupusers_.Add();
}
inline ::fixbuf::GroupUser* Group::add_groupusers() {
  // @@protoc_insertion_point(field_add:fixbuf.Group.groupusers)
  return _internal_add_groupusers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::GroupUser >&
Group::groupusers() const {
  // @@protoc_insertion_point(field_list:fixbuf.Group.groupusers)
  return groupusers_;
}

// -------------------------------------------------------------------

// CreateGroup

// int32 userid = 1;
inline void CreateGroup::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroup::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroup::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.CreateGroup.userid)
  return _internal_userid();
}
inline void CreateGroup::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void CreateGroup::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.CreateGroup.userid)
}

// .fixbuf.Group group = 2;
inline bool CreateGroup::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool CreateGroup::has_group() const {
  return _internal_has_group();
}
inline void CreateGroup::clear_group() {
  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::fixbuf::Group& CreateGroup::_internal_group() const {
  const ::fixbuf::Group* p = group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbuf::Group*>(
      &::fixbuf::_Group_default_instance_);
}
inline const ::fixbuf::Group& CreateGroup::group() const {
  // @@protoc_insertion_point(field_get:fixbuf.CreateGroup.group)
  return _internal_group();
}
inline void CreateGroup::unsafe_arena_set_allocated_group(
    ::fixbuf::Group* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.CreateGroup.group)
}
inline ::fixbuf::Group* CreateGroup::release_group() {
  auto temp = unsafe_arena_release_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbuf::Group* CreateGroup::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:fixbuf.CreateGroup.group)
  
  ::fixbuf::Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::fixbuf::Group* CreateGroup::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbuf::Group>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::fixbuf::Group* CreateGroup::mutable_group() {
  // @@protoc_insertion_point(field_mutable:fixbuf.CreateGroup.group)
  return _internal_mutable_group();
}
inline void CreateGroup::set_allocated_group(::fixbuf::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:fixbuf.CreateGroup.group)
}

// -------------------------------------------------------------------

// AddGroup

// int32 userid = 1;
inline void AddGroup::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.AddGroup.userid)
  return _internal_userid();
}
inline void AddGroup::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void AddGroup::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.AddGroup.userid)
}

// int32 groupid = 2;
inline void AddGroup::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroup::groupid() const {
  // @@protoc_insertion_point(field_get:fixbuf.AddGroup.groupid)
  return _internal_groupid();
}
inline void AddGroup::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void AddGroup::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbuf.AddGroup.groupid)
}

// -------------------------------------------------------------------

// ToUserMsg

// int32 userid = 1;
inline void ToUserMsg::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToUserMsg::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToUserMsg::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.ToUserMsg.userid)
  return _internal_userid();
}
inline void ToUserMsg::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void ToUserMsg::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.ToUserMsg.userid)
}

// bytes username = 2;
inline void ToUserMsg::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ToUserMsg::username() const {
  // @@protoc_insertion_point(field_get:fixbuf.ToUserMsg.username)
  return _internal_username();
}
inline void ToUserMsg::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:fixbuf.ToUserMsg.username)
}
inline std::string* ToUserMsg::mutable_username() {
  // @@protoc_insertion_point(field_mutable:fixbuf.ToUserMsg.username)
  return _internal_mutable_username();
}
inline const std::string& ToUserMsg::_internal_username() const {
  return username_.Get();
}
inline void ToUserMsg::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToUserMsg::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.ToUserMsg.username)
}
inline void ToUserMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.ToUserMsg.username)
}
inline void ToUserMsg::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.ToUserMsg.username)
}
inline std::string* ToUserMsg::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToUserMsg::release_username() {
  // @@protoc_insertion_point(field_release:fixbuf.ToUserMsg.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToUserMsg::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.ToUserMsg.username)
}
inline std::string* ToUserMsg::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.ToUserMsg.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToUserMsg::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.ToUserMsg.username)
}

// int32 touserid = 3;
inline void ToUserMsg::clear_touserid() {
  touserid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToUserMsg::_internal_touserid() const {
  return touserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToUserMsg::touserid() const {
  // @@protoc_insertion_point(field_get:fixbuf.ToUserMsg.touserid)
  return _internal_touserid();
}
inline void ToUserMsg::_internal_set_touserid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touserid_ = value;
}
inline void ToUserMsg::set_touserid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touserid(value);
  // @@protoc_insertion_point(field_set:fixbuf.ToUserMsg.touserid)
}

// bytes sendtime = 4;
inline void ToUserMsg::clear_sendtime() {
  sendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ToUserMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:fixbuf.ToUserMsg.sendtime)
  return _internal_sendtime();
}
inline void ToUserMsg::set_sendtime(const std::string& value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:fixbuf.ToUserMsg.sendtime)
}
inline std::string* ToUserMsg::mutable_sendtime() {
  // @@protoc_insertion_point(field_mutable:fixbuf.ToUserMsg.sendtime)
  return _internal_mutable_sendtime();
}
inline const std::string& ToUserMsg::_internal_sendtime() const {
  return sendtime_.Get();
}
inline void ToUserMsg::_internal_set_sendtime(const std::string& value) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToUserMsg::set_sendtime(std::string&& value) {
  
  sendtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.ToUserMsg.sendtime)
}
inline void ToUserMsg::set_sendtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.ToUserMsg.sendtime)
}
inline void ToUserMsg::set_sendtime(const void* value,
    size_t size) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.ToUserMsg.sendtime)
}
inline std::string* ToUserMsg::_internal_mutable_sendtime() {
  
  return sendtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToUserMsg::release_sendtime() {
  // @@protoc_insertion_point(field_release:fixbuf.ToUserMsg.sendtime)
  return sendtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToUserMsg::set_allocated_sendtime(std::string* sendtime) {
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.ToUserMsg.sendtime)
}
inline std::string* ToUserMsg::unsafe_arena_release_sendtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.ToUserMsg.sendtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sendtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToUserMsg::unsafe_arena_set_allocated_sendtime(
    std::string* sendtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sendtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.ToUserMsg.sendtime)
}

// bytes msg = 5;
inline void ToUserMsg::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ToUserMsg::msg() const {
  // @@protoc_insertion_point(field_get:fixbuf.ToUserMsg.msg)
  return _internal_msg();
}
inline void ToUserMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:fixbuf.ToUserMsg.msg)
}
inline std::string* ToUserMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbuf.ToUserMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& ToUserMsg::_internal_msg() const {
  return msg_.Get();
}
inline void ToUserMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToUserMsg::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.ToUserMsg.msg)
}
inline void ToUserMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.ToUserMsg.msg)
}
inline void ToUserMsg::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.ToUserMsg.msg)
}
inline std::string* ToUserMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToUserMsg::release_msg() {
  // @@protoc_insertion_point(field_release:fixbuf.ToUserMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToUserMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.ToUserMsg.msg)
}
inline std::string* ToUserMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.ToUserMsg.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToUserMsg::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.ToUserMsg.msg)
}

// -------------------------------------------------------------------

// FromMsg

// int32 fromid = 1;
inline void FromMsg::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FromMsg::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FromMsg::fromid() const {
  // @@protoc_insertion_point(field_get:fixbuf.FromMsg.fromid)
  return _internal_fromid();
}
inline void FromMsg::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void FromMsg::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:fixbuf.FromMsg.fromid)
}

// bytes fromname = 2;
inline void FromMsg::clear_fromname() {
  fromname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FromMsg::fromname() const {
  // @@protoc_insertion_point(field_get:fixbuf.FromMsg.fromname)
  return _internal_fromname();
}
inline void FromMsg::set_fromname(const std::string& value) {
  _internal_set_fromname(value);
  // @@protoc_insertion_point(field_set:fixbuf.FromMsg.fromname)
}
inline std::string* FromMsg::mutable_fromname() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FromMsg.fromname)
  return _internal_mutable_fromname();
}
inline const std::string& FromMsg::_internal_fromname() const {
  return fromname_.Get();
}
inline void FromMsg::_internal_set_fromname(const std::string& value) {
  
  fromname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromMsg::set_fromname(std::string&& value) {
  
  fromname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FromMsg.fromname)
}
inline void FromMsg::set_fromname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FromMsg.fromname)
}
inline void FromMsg::set_fromname(const void* value,
    size_t size) {
  
  fromname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FromMsg.fromname)
}
inline std::string* FromMsg::_internal_mutable_fromname() {
  
  return fromname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromMsg::release_fromname() {
  // @@protoc_insertion_point(field_release:fixbuf.FromMsg.fromname)
  return fromname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromMsg::set_allocated_fromname(std::string* fromname) {
  if (fromname != nullptr) {
    
  } else {
    
  }
  fromname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FromMsg.fromname)
}
inline std::string* FromMsg::unsafe_arena_release_fromname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FromMsg.fromname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fromname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromMsg::unsafe_arena_set_allocated_fromname(
    std::string* fromname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fromname != nullptr) {
    
  } else {
    
  }
  fromname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fromname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FromMsg.fromname)
}

// bytes sendtime = 3;
inline void FromMsg::clear_sendtime() {
  sendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FromMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:fixbuf.FromMsg.sendtime)
  return _internal_sendtime();
}
inline void FromMsg::set_sendtime(const std::string& value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:fixbuf.FromMsg.sendtime)
}
inline std::string* FromMsg::mutable_sendtime() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FromMsg.sendtime)
  return _internal_mutable_sendtime();
}
inline const std::string& FromMsg::_internal_sendtime() const {
  return sendtime_.Get();
}
inline void FromMsg::_internal_set_sendtime(const std::string& value) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromMsg::set_sendtime(std::string&& value) {
  
  sendtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FromMsg.sendtime)
}
inline void FromMsg::set_sendtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FromMsg.sendtime)
}
inline void FromMsg::set_sendtime(const void* value,
    size_t size) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FromMsg.sendtime)
}
inline std::string* FromMsg::_internal_mutable_sendtime() {
  
  return sendtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromMsg::release_sendtime() {
  // @@protoc_insertion_point(field_release:fixbuf.FromMsg.sendtime)
  return sendtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromMsg::set_allocated_sendtime(std::string* sendtime) {
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FromMsg.sendtime)
}
inline std::string* FromMsg::unsafe_arena_release_sendtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FromMsg.sendtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sendtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromMsg::unsafe_arena_set_allocated_sendtime(
    std::string* sendtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sendtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FromMsg.sendtime)
}

// bytes msg = 4;
inline void FromMsg::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FromMsg::msg() const {
  // @@protoc_insertion_point(field_get:fixbuf.FromMsg.msg)
  return _internal_msg();
}
inline void FromMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:fixbuf.FromMsg.msg)
}
inline std::string* FromMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FromMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& FromMsg::_internal_msg() const {
  return msg_.Get();
}
inline void FromMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromMsg::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FromMsg.msg)
}
inline void FromMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FromMsg.msg)
}
inline void FromMsg::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FromMsg.msg)
}
inline std::string* FromMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromMsg::release_msg() {
  // @@protoc_insertion_point(field_release:fixbuf.FromMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FromMsg.msg)
}
inline std::string* FromMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FromMsg.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromMsg::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FromMsg.msg)
}

// -------------------------------------------------------------------

// GroupMsg

// int32 userid = 1;
inline void GroupMsg::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupMsg.userid)
  return _internal_userid();
}
inline void GroupMsg::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void GroupMsg::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupMsg.userid)
}

// bytes username = 2;
inline void GroupMsg::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMsg::username() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupMsg.username)
  return _internal_username();
}
inline void GroupMsg::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupMsg.username)
}
inline std::string* GroupMsg::mutable_username() {
  // @@protoc_insertion_point(field_mutable:fixbuf.GroupMsg.username)
  return _internal_mutable_username();
}
inline const std::string& GroupMsg::_internal_username() const {
  return username_.Get();
}
inline void GroupMsg::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMsg::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.GroupMsg.username)
}
inline void GroupMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.GroupMsg.username)
}
inline void GroupMsg::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.GroupMsg.username)
}
inline std::string* GroupMsg::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMsg::release_username() {
  // @@protoc_insertion_point(field_release:fixbuf.GroupMsg.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMsg::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.GroupMsg.username)
}
inline std::string* GroupMsg::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.GroupMsg.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupMsg::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.GroupMsg.username)
}

// int32 groupid = 3;
inline void GroupMsg::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::groupid() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupMsg.groupid)
  return _internal_groupid();
}
inline void GroupMsg::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void GroupMsg::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupMsg.groupid)
}

// bytes sendtime = 4;
inline void GroupMsg::clear_sendtime() {
  sendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupMsg.sendtime)
  return _internal_sendtime();
}
inline void GroupMsg::set_sendtime(const std::string& value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupMsg.sendtime)
}
inline std::string* GroupMsg::mutable_sendtime() {
  // @@protoc_insertion_point(field_mutable:fixbuf.GroupMsg.sendtime)
  return _internal_mutable_sendtime();
}
inline const std::string& GroupMsg::_internal_sendtime() const {
  return sendtime_.Get();
}
inline void GroupMsg::_internal_set_sendtime(const std::string& value) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMsg::set_sendtime(std::string&& value) {
  
  sendtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.GroupMsg.sendtime)
}
inline void GroupMsg::set_sendtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.GroupMsg.sendtime)
}
inline void GroupMsg::set_sendtime(const void* value,
    size_t size) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.GroupMsg.sendtime)
}
inline std::string* GroupMsg::_internal_mutable_sendtime() {
  
  return sendtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMsg::release_sendtime() {
  // @@protoc_insertion_point(field_release:fixbuf.GroupMsg.sendtime)
  return sendtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMsg::set_allocated_sendtime(std::string* sendtime) {
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.GroupMsg.sendtime)
}
inline std::string* GroupMsg::unsafe_arena_release_sendtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.GroupMsg.sendtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sendtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupMsg::unsafe_arena_set_allocated_sendtime(
    std::string* sendtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sendtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.GroupMsg.sendtime)
}

// bytes msg = 5;
inline void GroupMsg::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupMsg::msg() const {
  // @@protoc_insertion_point(field_get:fixbuf.GroupMsg.msg)
  return _internal_msg();
}
inline void GroupMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:fixbuf.GroupMsg.msg)
}
inline std::string* GroupMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbuf.GroupMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& GroupMsg::_internal_msg() const {
  return msg_.Get();
}
inline void GroupMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupMsg::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.GroupMsg.msg)
}
inline void GroupMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.GroupMsg.msg)
}
inline void GroupMsg::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.GroupMsg.msg)
}
inline std::string* GroupMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupMsg::release_msg() {
  // @@protoc_insertion_point(field_release:fixbuf.GroupMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.GroupMsg.msg)
}
inline std::string* GroupMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.GroupMsg.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GroupMsg::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.GroupMsg.msg)
}

// -------------------------------------------------------------------

// LoginMsg

// .fixbuf.User user = 1;
inline bool LoginMsg::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool LoginMsg::has_user() const {
  return _internal_has_user();
}
inline void LoginMsg::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::fixbuf::User& LoginMsg::_internal_user() const {
  const ::fixbuf::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbuf::User*>(
      &::fixbuf::_User_default_instance_);
}
inline const ::fixbuf::User& LoginMsg::user() const {
  // @@protoc_insertion_point(field_get:fixbuf.LoginMsg.user)
  return _internal_user();
}
inline void LoginMsg::unsafe_arena_set_allocated_user(
    ::fixbuf::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.LoginMsg.user)
}
inline ::fixbuf::User* LoginMsg::release_user() {
  auto temp = unsafe_arena_release_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbuf::User* LoginMsg::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:fixbuf.LoginMsg.user)
  
  ::fixbuf::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::fixbuf::User* LoginMsg::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbuf::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::fixbuf::User* LoginMsg::mutable_user() {
  // @@protoc_insertion_point(field_mutable:fixbuf.LoginMsg.user)
  return _internal_mutable_user();
}
inline void LoginMsg::set_allocated_user(::fixbuf::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:fixbuf.LoginMsg.user)
}

// repeated bytes recvmsg = 2;
inline int LoginMsg::_internal_recvmsg_size() const {
  return recvmsg_.size();
}
inline int LoginMsg::recvmsg_size() const {
  return _internal_recvmsg_size();
}
inline void LoginMsg::clear_recvmsg() {
  recvmsg_.Clear();
}
inline std::string* LoginMsg::add_recvmsg() {
  // @@protoc_insertion_point(field_add_mutable:fixbuf.LoginMsg.recvmsg)
  return _internal_add_recvmsg();
}
inline const std::string& LoginMsg::_internal_recvmsg(int index) const {
  return recvmsg_.Get(index);
}
inline const std::string& LoginMsg::recvmsg(int index) const {
  // @@protoc_insertion_point(field_get:fixbuf.LoginMsg.recvmsg)
  return _internal_recvmsg(index);
}
inline std::string* LoginMsg::mutable_recvmsg(int index) {
  // @@protoc_insertion_point(field_mutable:fixbuf.LoginMsg.recvmsg)
  return recvmsg_.Mutable(index);
}
inline void LoginMsg::set_recvmsg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbuf.LoginMsg.recvmsg)
  recvmsg_.Mutable(index)->assign(value);
}
inline void LoginMsg::set_recvmsg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbuf.LoginMsg.recvmsg)
  recvmsg_.Mutable(index)->assign(std::move(value));
}
inline void LoginMsg::set_recvmsg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recvmsg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbuf.LoginMsg.recvmsg)
}
inline void LoginMsg::set_recvmsg(int index, const void* value, size_t size) {
  recvmsg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbuf.LoginMsg.recvmsg)
}
inline std::string* LoginMsg::_internal_add_recvmsg() {
  return recvmsg_.Add();
}
inline void LoginMsg::add_recvmsg(const std::string& value) {
  recvmsg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbuf.LoginMsg.recvmsg)
}
inline void LoginMsg::add_recvmsg(std::string&& value) {
  recvmsg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbuf.LoginMsg.recvmsg)
}
inline void LoginMsg::add_recvmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recvmsg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbuf.LoginMsg.recvmsg)
}
inline void LoginMsg::add_recvmsg(const void* value, size_t size) {
  recvmsg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbuf.LoginMsg.recvmsg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginMsg::recvmsg() const {
  // @@protoc_insertion_point(field_list:fixbuf.LoginMsg.recvmsg)
  return recvmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginMsg::mutable_recvmsg() {
  // @@protoc_insertion_point(field_mutable_list:fixbuf.LoginMsg.recvmsg)
  return &recvmsg_;
}

// repeated .fixbuf.User friendlist = 3;
inline int LoginMsg::_internal_friendlist_size() const {
  return friendlist_.size();
}
inline int LoginMsg::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void LoginMsg::clear_friendlist() {
  friendlist_.Clear();
}
inline ::fixbuf::User* LoginMsg::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:fixbuf.LoginMsg.friendlist)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::User >*
LoginMsg::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:fixbuf.LoginMsg.friendlist)
  return &friendlist_;
}
inline const ::fixbuf::User& LoginMsg::_internal_friendlist(int index) const {
  return friendlist_.Get(index);
}
inline const ::fixbuf::User& LoginMsg::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:fixbuf.LoginMsg.friendlist)
  return _internal_friendlist(index);
}
inline ::fixbuf::User* LoginMsg::_internal_add_friendlist() {
  return friendlist_.Add();
}
inline ::fixbuf::User* LoginMsg::add_friendlist() {
  // @@protoc_insertion_point(field_add:fixbuf.LoginMsg.friendlist)
  return _internal_add_friendlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::User >&
LoginMsg::friendlist() const {
  // @@protoc_insertion_point(field_list:fixbuf.LoginMsg.friendlist)
  return friendlist_;
}

// repeated .fixbuf.Group grouplist = 4;
inline int LoginMsg::_internal_grouplist_size() const {
  return grouplist_.size();
}
inline int LoginMsg::grouplist_size() const {
  return _internal_grouplist_size();
}
inline void LoginMsg::clear_grouplist() {
  grouplist_.Clear();
}
inline ::fixbuf::Group* LoginMsg::mutable_grouplist(int index) {
  // @@protoc_insertion_point(field_mutable:fixbuf.LoginMsg.grouplist)
  return grouplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::Group >*
LoginMsg::mutable_grouplist() {
  // @@protoc_insertion_point(field_mutable_list:fixbuf.LoginMsg.grouplist)
  return &grouplist_;
}
inline const ::fixbuf::Group& LoginMsg::_internal_grouplist(int index) const {
  return grouplist_.Get(index);
}
inline const ::fixbuf::Group& LoginMsg::grouplist(int index) const {
  // @@protoc_insertion_point(field_get:fixbuf.LoginMsg.grouplist)
  return _internal_grouplist(index);
}
inline ::fixbuf::Group* LoginMsg::_internal_add_grouplist() {
  return grouplist_.Add();
}
inline ::fixbuf::Group* LoginMsg::add_grouplist() {
  // @@protoc_insertion_point(field_add:fixbuf.LoginMsg.grouplist)
  return _internal_add_grouplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbuf::Group >&
LoginMsg::grouplist() const {
  // @@protoc_insertion_point(field_list:fixbuf.LoginMsg.grouplist)
  return grouplist_;
}

// -------------------------------------------------------------------

// FileList

// uint32 userid = 1;
inline void FileList::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileList::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileList::userid() const {
  // @@protoc_insertion_point(field_get:fixbuf.FileList.userid)
  return _internal_userid();
}
inline void FileList::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void FileList::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbuf.FileList.userid)
}

// repeated bytes filelist = 2;
inline int FileList::_internal_filelist_size() const {
  return filelist_.size();
}
inline int FileList::filelist_size() const {
  return _internal_filelist_size();
}
inline void FileList::clear_filelist() {
  filelist_.Clear();
}
inline std::string* FileList::add_filelist() {
  // @@protoc_insertion_point(field_add_mutable:fixbuf.FileList.filelist)
  return _internal_add_filelist();
}
inline const std::string& FileList::_internal_filelist(int index) const {
  return filelist_.Get(index);
}
inline const std::string& FileList::filelist(int index) const {
  // @@protoc_insertion_point(field_get:fixbuf.FileList.filelist)
  return _internal_filelist(index);
}
inline std::string* FileList::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:fixbuf.FileList.filelist)
  return filelist_.Mutable(index);
}
inline void FileList::set_filelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbuf.FileList.filelist)
  filelist_.Mutable(index)->assign(value);
}
inline void FileList::set_filelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbuf.FileList.filelist)
  filelist_.Mutable(index)->assign(std::move(value));
}
inline void FileList::set_filelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbuf.FileList.filelist)
}
inline void FileList::set_filelist(int index, const void* value, size_t size) {
  filelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FileList.filelist)
}
inline std::string* FileList::_internal_add_filelist() {
  return filelist_.Add();
}
inline void FileList::add_filelist(const std::string& value) {
  filelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbuf.FileList.filelist)
}
inline void FileList::add_filelist(std::string&& value) {
  filelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbuf.FileList.filelist)
}
inline void FileList::add_filelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbuf.FileList.filelist)
}
inline void FileList::add_filelist(const void* value, size_t size) {
  filelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbuf.FileList.filelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileList::filelist() const {
  // @@protoc_insertion_point(field_list:fixbuf.FileList.filelist)
  return filelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileList::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:fixbuf.FileList.filelist)
  return &filelist_;
}

// -------------------------------------------------------------------

// FileTrans

// bytes ip = 1;
inline void FileTrans::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTrans::ip() const {
  // @@protoc_insertion_point(field_get:fixbuf.FileTrans.ip)
  return _internal_ip();
}
inline void FileTrans::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:fixbuf.FileTrans.ip)
}
inline std::string* FileTrans::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FileTrans.ip)
  return _internal_mutable_ip();
}
inline const std::string& FileTrans::_internal_ip() const {
  return ip_.Get();
}
inline void FileTrans::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTrans::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FileTrans.ip)
}
inline void FileTrans::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FileTrans.ip)
}
inline void FileTrans::set_ip(const void* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FileTrans.ip)
}
inline std::string* FileTrans::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTrans::release_ip() {
  // @@protoc_insertion_point(field_release:fixbuf.FileTrans.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrans::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FileTrans.ip)
}
inline std::string* FileTrans::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FileTrans.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTrans::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FileTrans.ip)
}

// uint32 port = 2;
inline void FileTrans::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrans::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrans::port() const {
  // @@protoc_insertion_point(field_get:fixbuf.FileTrans.port)
  return _internal_port();
}
inline void FileTrans::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void FileTrans::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:fixbuf.FileTrans.port)
}

// bytes filename = 3;
inline void FileTrans::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTrans::filename() const {
  // @@protoc_insertion_point(field_get:fixbuf.FileTrans.filename)
  return _internal_filename();
}
inline void FileTrans::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:fixbuf.FileTrans.filename)
}
inline std::string* FileTrans::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FileTrans.filename)
  return _internal_mutable_filename();
}
inline const std::string& FileTrans::_internal_filename() const {
  return filename_.Get();
}
inline void FileTrans::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTrans::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FileTrans.filename)
}
inline void FileTrans::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FileTrans.filename)
}
inline void FileTrans::set_filename(const void* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FileTrans.filename)
}
inline std::string* FileTrans::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTrans::release_filename() {
  // @@protoc_insertion_point(field_release:fixbuf.FileTrans.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrans::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FileTrans.filename)
}
inline std::string* FileTrans::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FileTrans.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTrans::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FileTrans.filename)
}

// bytes newfilename = 4;
inline void FileTrans::clear_newfilename() {
  newfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTrans::newfilename() const {
  // @@protoc_insertion_point(field_get:fixbuf.FileTrans.newfilename)
  return _internal_newfilename();
}
inline void FileTrans::set_newfilename(const std::string& value) {
  _internal_set_newfilename(value);
  // @@protoc_insertion_point(field_set:fixbuf.FileTrans.newfilename)
}
inline std::string* FileTrans::mutable_newfilename() {
  // @@protoc_insertion_point(field_mutable:fixbuf.FileTrans.newfilename)
  return _internal_mutable_newfilename();
}
inline const std::string& FileTrans::_internal_newfilename() const {
  return newfilename_.Get();
}
inline void FileTrans::_internal_set_newfilename(const std::string& value) {
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTrans::set_newfilename(std::string&& value) {
  
  newfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbuf.FileTrans.newfilename)
}
inline void FileTrans::set_newfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbuf.FileTrans.newfilename)
}
inline void FileTrans::set_newfilename(const void* value,
    size_t size) {
  
  newfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbuf.FileTrans.newfilename)
}
inline std::string* FileTrans::_internal_mutable_newfilename() {
  
  return newfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTrans::release_newfilename() {
  // @@protoc_insertion_point(field_release:fixbuf.FileTrans.newfilename)
  return newfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrans::set_allocated_newfilename(std::string* newfilename) {
  if (newfilename != nullptr) {
    
  } else {
    
  }
  newfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbuf.FileTrans.newfilename)
}
inline std::string* FileTrans::unsafe_arena_release_newfilename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbuf.FileTrans.newfilename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newfilename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTrans::unsafe_arena_set_allocated_newfilename(
    std::string* newfilename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newfilename != nullptr) {
    
  } else {
    
  }
  newfilename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newfilename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbuf.FileTrans.newfilename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fixbuf::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fixbuf::MsgType>() {
  return ::fixbuf::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_2eproto
